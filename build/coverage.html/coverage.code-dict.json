{"/home/travis/build/npmtest/node-npmtest-sparkpost/test.js":"/* istanbul instrument in package npmtest_sparkpost */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sparkpost/lib.npmtest_sparkpost.js":"/* istanbul instrument in package npmtest_sparkpost */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_sparkpost = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_sparkpost = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-sparkpost/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-sparkpost && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_sparkpost */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_sparkpost\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_sparkpost.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_sparkpost.rollup.js'] =\n            local.assetsDict['/assets.npmtest_sparkpost.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_sparkpost.__dirname + '/lib.npmtest_sparkpost.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sparkpost/node_modules/sparkpost/lib/sparkpost.js":"'use strict';\n\nconst version = require('../package.json').version;\nconst url = require('url');\nconst withCallback = require('./withCallback');\nconst request = require('request');\nconst _ = require('lodash');\n\n//REST API Config Defaults\nconst defaults = {\n  origin: 'https://api.sparkpost.com:443',\n  apiVersion: 'v1',\n  debug: false\n};\n\nconst resolveUri = function(origin, uri) {\n  if (!/^http/.test(uri)) {\n    uri = url.resolve(origin, uri);\n  }\n  return uri;\n};\n\nconst handleOptions = function(apiKey, options) {\n  if (typeof apiKey === 'object') {\n    options = apiKey;\n    options.key = process.env.SPARKPOST_API_KEY;\n  } else {\n    options = options || {};\n    options.key = apiKey;\n  }\n\n  options.origin = options.origin || options.endpoint || defaults.origin;\n\n  return options;\n};\n\nconst createSparkPostError = function(res, body) {\n  const err = new Error(res.statusMessage);\n  body = body || {};\n  err.name = 'SparkPostError';\n  err.errors = body.errors;\n  err.statusCode = res.statusCode;\n\n  return err;\n};\n\nconst createVersionStr = function(version, options) {\n  let versionStr = `node-sparkpost/${version} node.js/${process.version}`;\n  if (options.stackIdentity) {\n    versionStr += `${options.stackIdentity} ${versionStr}`;\n  }\n  return versionStr;\n};\n\nconst SparkPost = function(apiKey, options) {\n\n  options = handleOptions(apiKey, options);\n\n  this.apiKey = options.key || process.env.SPARKPOST_API_KEY;\n\n  if (typeof this.apiKey === 'undefined') {\n    throw new Error('Client requires an API Key.');\n  }\n\n  // adding version to object\n  this.version = version;\n\n  // setting up default headers\n  this.defaultHeaders = _.merge({\n    'User-Agent': createVersionStr(version, options)\n    , 'Content-Type': 'application/json'\n  }, options.headers);\n\n  //Optional client config\n  this.origin = options.origin;\n  this.apiVersion = options.apiVersion || defaults.apiVersion;\n  this.debug = (typeof options.debug === 'boolean') ? options.debug : defaults.debug;\n\n  this.inboundDomains = require('./inboundDomains')(this);\n  this.messageEvents = require('./messageEvents')(this);\n  this.recipientLists = require('./recipientLists')(this);\n  this.relayWebhooks = require('./relayWebhooks')(this);\n  this.sendingDomains = require('./sendingDomains')(this);\n  this.subaccounts = require('./subaccounts')(this);\n  this.suppressionList = require('./suppressionList')(this);\n  this.templates = require('./templates')(this);\n  this.transmissions = require('./transmissions')(this);\n  this.webhooks = require('./webhooks')(this);\n};\n\nSparkPost.prototype.request = function(options, callback) {\n  const baseUrl = `${this.origin}/api/${this.apiVersion}/`;\n\n  // we need options\n  if (!_.isPlainObject(options)) {\n    throw new TypeError('options argument is required');\n  }\n\n  // if we don't have a fully qualified URL let's make one\n  options.uri = resolveUri(baseUrl, options.uri);\n\n  // merge headers\n  options.headers = _.merge({}, this.defaultHeaders, options.headers);\n\n  // add Authorization with API Key\n  options.headers.Authorization = this.apiKey;\n\n  // set Strict SSL (Always true)\n  options.strictSSL = true;\n\n  // default to accepting gzipped responses\n  if (typeof options.gzip === 'undefined') {\n    options.gzip = true;\n  }\n\n  // set debug\n  options.debug = (typeof options.debug === 'boolean') ? options.debug : this.debug;\n\n  return withCallback(new Promise(function(resolve, reject) {\n    request(options, function(err, res, body) {\n      const invalidCodeRegex = /(5|4)[0-9]{2}/;\n      let response;\n\n      if (err) {\n        reject(err);\n      } else if (invalidCodeRegex.test(res.statusCode)) {\n        err = createSparkPostError(res, body);\n        reject(err);\n      } else {\n        response = body;\n        if (options.debug) {\n          response.debug = res;\n        }\n        resolve(response);\n      }\n    });\n  }), callback);\n};\n\nSparkPost.prototype.get = function(options, callback) {\n  options.method = 'GET';\n  options.json = true;\n\n  return this.request(options, callback);\n};\n\nSparkPost.prototype.post = function(options, callback) {\n  options.method = 'POST';\n\n  return this.request(options, callback);\n};\n\nSparkPost.prototype.put = function(options, callback) {\n  options.method = 'PUT';\n\n  return this.request(options, callback);\n};\n\nSparkPost.prototype.delete = function(options, callback) {\n  options.method = 'DELETE';\n\n  return this.request(options, callback);\n};\n\nSparkPost.prototype.reject = function(error, callback) {\n  return withCallback(Promise.reject(error), callback);\n};\n\nmodule.exports = SparkPost;\n\n/**\n * Standard error-first callback for HTTP requests\n\n * @callback RequestCb\n * @param {Error} err - Any error that occurred\n * @param {Object} [data] - API response body (or just the value of `body.results`, if it exists)\n */\n","/home/travis/build/npmtest/node-npmtest-sparkpost/node_modules/sparkpost/lib/withCallback.js":"'use strict';\n\n/**\n * withCallback handles an optional nodeback\n * and return the promise object\n *\n * @param promise {Promise}\n * @param cb {Function}\n * @return Promise\n *\n * @example\n * function eitherOr(options, callback) {\n *   return withCallback(promiseThingy(options), callback);\n * }\n */\n\nfunction withCallback(promise, cb) {\n  if (typeof cb !== 'function') {\n    cb = noop;\n  }\n\n  promise.then((result) => {\n    cb(null, result);\n  }).catch((err) => {\n    cb(err);\n  });\n\n  return promise;\n}\n\nfunction noop() {}\n\nmodule.exports = withCallback;\n","/home/travis/build/npmtest/node-npmtest-sparkpost/node_modules/sparkpost/lib/inboundDomains.js":"'use strict';\n\nconst api = 'inbound-domains';\n\nmodule.exports = function(client) {\n  return {\n    /**\n     * List an overview of all inbound domains in the account.\n     *\n     * @param {RequestCb} [callback]\n     * @returns {Promise}\n     */\n    list: function(callback) {\n      const options = {\n        uri: api\n      };\n      return client.get(options, callback);\n    },\n    /**\n     * Get an inbound domain by its domain name\n     *\n     * @param {string} domain\n     * @param {RequestCb} [callback]\n     * @returns {Promise}\n     */\n    get: function(domain, callback) {\n      if (!domain || typeof domain !== 'string') {\n        return client.reject(new Error('domain is required'), callback);\n      }\n\n      const options = {\n        uri: `${api}/${domain}`\n      };\n      return client.get(options, callback);\n    },\n    /**\n     * Create a new inbound domain\n     *\n     * @param {Object} createOpts\n     * @param {RequestCb} [callback]\n     * @returns {Promise}\n     */\n    create: function(createOpts, callback) {\n      if (!createOpts || typeof createOpts !== 'object') {\n        return client.reject(new Error('create options are required'), callback);\n      }\n\n      const options = {\n        uri: api\n        , json: createOpts\n      };\n      return client.post(options, callback);\n    },\n    /**\n     * Delete an existing inbound domain\n     *\n     * @param {string} domain\n     * @param {RequestCb} [callback]\n     * @returns {Promise}\n     */\n    delete: function(domain, callback) {\n      if (!domain || typeof domain !== 'string') {\n        return client.reject(new Error('domain is required'), callback);\n      }\n\n      const options = {\n        uri: `${api}/${domain}`\n      };\n      return client.delete(options, callback);\n    }\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-sparkpost/node_modules/sparkpost/lib/messageEvents.js":"'use strict';\n\nconst api = 'message-events';\n\n/*\n * \"Class\" declaration, Message Events API exposes one function:\n * - search: retrieves list of message events according to given params\n */\nmodule.exports = function(client) {\n  return {\n    /**\n     * Search for message events using given parameters\n     *\n     * @param {Object} parameters\n     * @param {RequestCb} [callback]\n     * @returns {Promise}\n     */\n    search: function(parameters, callback) {\n      const options = {\n        uri: api\n        , qs: {}\n      };\n\n      Object.keys(parameters).forEach(function(paramname) {\n        if (Array.isArray(parameters[paramname])) {\n          options.qs[paramname] = parameters[paramname].join(',');\n        } else {\n          options.qs[paramname] = parameters[paramname];\n        }\n      });\n      return client.get(options, callback);\n    }\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-sparkpost/node_modules/sparkpost/lib/recipientLists.js":"'use strict';\n\nconst api = 'recipient-lists';\n\nmodule.exports = function(client) {\n  return {\n    /**\n     * Get a list of all your recipient lists\n     * https://developers.sparkpost.com/api/recipient-lists#recipient-lists-retrieve-get\n     *\n     * @param {RequestCb} [callback]\n     * @return {Promise}\n     */\n    list: function(callback) {\n      const reqOpts = {\n        uri: api\n      };\n      return client.get(reqOpts, callback);\n    },\n\n    /**\n     * Get a list of all your recipient lists\n     * https://developers.sparkpost.com/api/recipient-lists#recipient-lists-list-get\n     *\n     * @param {string} id - Unique ID of the list to return\n     * @param {Object} options - Hash of request options\n     * @param {RequestCb} [callback]\n     * @return {Promise}\n     */\n    get: function(id, options, callback) {\n      options = options || {};\n\n      // Handle optional options argument\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      if (!id) {\n        return client.reject(new Error('id is required'), callback);\n      }\n\n      const reqOpts = {\n        uri: `${api}/${id}`,\n        qs: options\n      };\n\n      return client.get(reqOpts, callback);\n    },\n\n\n    /**\n     * Create a new recipient list\n     * https://developers.sparkpost.com/api/recipient-lists#recipient-lists-create-post\n     *\n     * @param  {Object} recipientList - recipient list object\n     * @param  {Array} recipientList.recipients - Array of recipient objects\n     * @param  {RequestCb} callback\n     * @return {Promise}\n     */\n    create: function(recipientList, callback) {\n      if (!recipientList || typeof recipientList !== 'object' || !recipientList.recipients) {\n        return client.reject(new Error('recipient list is required'), callback);\n      }\n\n      const reqOpts = {\n        uri: api,\n        json: recipientList,\n        qs: {\n          num_rcpt_errors: recipientList.num_rcpt_errors\n        }\n      };\n\n      return client.post(reqOpts, callback);\n    },\n\n    /**\n     * Update an existing list\n     * https://developers.sparkpost.com/api/recipient-lists#recipient-lists-update-put\n     *\n     * @param {string} id - Unique ID of the list to be updated\n     * @param {Object} recipientList - recipient list object\n     * @param  {Array} recipientList.recipients - Array of recipient objects\n     * @param  {RequestCb} callback\n     * @return {Promise}\n     *\n     */\n    update: function(id, recipientList, callback) {\n      if (!id) {\n        return client.reject(new Error('recipient list id is required'), callback);\n      }\n\n      if (!recipientList || typeof recipientList === 'function') {\n        return client.reject(new Error('recipient list is required'), callback);\n      }\n\n      const reqOpts = {\n        uri: `${api}/${id}`,\n        json: recipientList,\n        qs: {\n          num_rcpt_errors: recipientList.num_rcpt_errors\n        }\n      };\n\n      return client.put(reqOpts, callback);\n    },\n\n    /**\n     * Delete an existing recipient list\n     * https://developers.sparkpost.com/api/recipient-lists#recipient-lists-delete-delete\n     *\n     * @param {string} id - ID of the list to be updated\n     * @param  {RequestCb} callback\n     * @return {Promise}\n     *\n     */\n    delete: function(id, callback) {\n      if (!id || typeof id !== 'string') {\n        return client.reject(new Error('id is required'), callback);\n      }\n\n      const reqOpts = {\n        uri: `${api}/${id}`\n      };\n\n      return client.delete(reqOpts, callback);\n    }\n  };\n\n};\n","/home/travis/build/npmtest/node-npmtest-sparkpost/node_modules/sparkpost/lib/relayWebhooks.js":"'use strict';\n\nconst api = 'relay-webhooks';\n\nmodule.exports = function(client) {\n  return {\n    /**\n     * List all relay webhooks\n     *\n     * @param {RequestCb} [callback]\n     * @returns {Promise}\n     */\n    list: function(callback) {\n      const reqOpts = {\n        uri: api\n      };\n      return client.get(reqOpts, callback);\n    },\n    /**\n     * Get details about a specified relay webhook by its id\n     *\n     * @param {string} id - the id of the relay webhook you want to look up\n     * @param {RequestCb} [callback]\n     * @returns {Promise}\n     */\n    get: function(id, callback) {\n      if (!id || typeof id !== 'string') {\n        return client.reject(new Error('id is required'), callback);\n      }\n\n      const options = {\n        uri: `${api}/${id}`\n      };\n\n      return client.get(options, callback);\n    },\n    /**\n     * Create a new relay webhook\n     *\n     * @param {Object} webhook - an object of [relay webhook attributes]{https://developers.sparkpost.com/api/relay-webhooks#header-relay-webhooks-object-properties}\n     * @param {RequestCb} [callback]\n     * @returns {Promise}\n     */\n    create: function(webhook, callback) {\n      if (!webhook || typeof webhook !== 'object') {\n        return client.reject(new Error('webhook object is required'), callback);\n      }\n\n      const reqOpts = {\n        uri: api\n        , json: webhook\n      };\n\n      return client.post(reqOpts, callback);\n    },\n    /**\n     * Update an existing relay webhook\n     *\n     * @param {string} id - the id of the relay webhook you want to update\n     * @param {Object} webhook - an object of [relay webhook attributes]{https://developers.sparkpost.com/api/relay-webhooks#header-relay-webhooks-object-properties}\n     * @param {RequestCb} [callback]\n     * @returns {Promise}\n     */\n    update: function(id, webhook, callback) {\n      if (!id || typeof id !== 'string') {\n        return client.reject(new Error('id is required'), callback);\n      }\n\n      if (!webhook || typeof webhook !== 'object') {\n        return client.reject(new Error('webhook object is required'), callback);\n      }\n\n      const reqOpts = {\n        uri: `${api}/${id}`\n        , json: webhook\n      };\n\n      return client.put(reqOpts, callback);\n    },\n    /**\n     * Delete an existing relay webhook\n     *\n     * @param {string} id - the id of the relay webhook you want to delete\n     * @param {RequestCb} [callback]\n     * @returns {Promise}\n     */\n    delete: function(id, callback) {\n      if (!id || typeof id !== 'string') {\n        return client.reject(new Error('id is required'), callback);\n      }\n\n      const options = {\n        uri: `${api}/${id}`\n      };\n\n      return client.delete(options, callback);\n    }\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-sparkpost/node_modules/sparkpost/lib/sendingDomains.js":"'use strict';\n\nconst api = 'sending-domains';\n\nmodule.exports = function(client) {\n  return {\n    /**\n     * Lists all sending domains\n     *\n     * @param {RequestCb} [callback]\n     * @return {Promise}\n     */\n    list: function(callback) {\n      const options = {\n        uri: api\n      };\n\n      return client.get(options, callback);\n    },\n\n    /**\n     * Get a single sending domain, by domain\n     *\n     * @param {string} domain - The domain name to get\n     * @param {RequestCb} [callback]\n     * @return {Promise}\n     */\n    get: function(domain, callback) {\n      if (!domain || typeof domain === 'function') {\n        return client.reject(new Error('domain is required'), callback);\n      }\n\n      const options = {\n        uri: `${api}/${domain}`\n      };\n\n      return client.get(options, callback);\n    },\n\n    /**\n     * Creates a new sending domain\n     *\n     * @param {Object} createOpts - attributes used to create the new domain\n     * @param {RequestCb} [callback]\n     * @return {Promise}\n     */\n    create: function(createOpts, callback) {\n      if (!createOpts || typeof createOpts !== 'object') {\n        return client.reject(new Error('create options are required'), callback);\n      }\n\n      const options = {\n        uri: api,\n        json: createOpts\n      };\n\n      return client.post(options, callback);\n    },\n\n    /**\n     * Update an existing sending domain\n     *\n     * @param {string} domain - The domain to update\n     * @param {Object} updateOpts - Hash of the sending domain attributes to update\n     * @param {RequestCb} [callback]\n     * @return {Promise}\n     */\n    update: function(domain, updateOpts, callback) {\n      if (typeof domain !== 'string') {\n        return client.reject(new Error('domain is required'), callback);\n      }\n\n      if (!updateOpts || typeof updateOpts !== 'object') {\n        return client.reject(new Error('update options are required'), callback);\n      }\n\n      const options = {\n        uri: `${api}/${domain}`,\n        json: updateOpts\n      };\n\n      return client.put(options, callback);\n    },\n\n    /**\n     * Delete an existing sending domain\n     *\n     * @param {string} domain - The domain to delete\n     * @param {RequestCb} [callback]\n     * @return {Promise}\n     */\n    delete: function(domain, callback) {\n      if (typeof domain !== 'string') {\n        return client.reject(new Error('domain is required'), callback);\n      }\n\n      const options = {\n        uri: `${api}/${domain}`\n      };\n\n      return client.delete(options, callback);\n    },\n\n    /**\n     * Verify an existing sending domain\n     *\n     * @param {string} domain - The domain to verify\n     * @param {Object} options - Hash of options to include in verification request\n     * @param {RequestCb} [callback]\n     * @return {Promise}\n     */\n    verify: function(domain, options, callback) {\n      if (typeof domain !== 'string') {\n        return client.reject(new Error('domain is required'), callback);\n      }\n\n      if (!options || typeof options !== 'object') {\n        return client.reject(new Error('verification options are required'), callback);\n      }\n\n      const reqOpts = {\n        uri: `${api}/${domain}/verify`,\n        json: options\n      };\n\n      return client.post(reqOpts, callback);\n    }\n  };\n\n};\n","/home/travis/build/npmtest/node-npmtest-sparkpost/node_modules/sparkpost/lib/subaccounts.js":"'use strict';\n\nconst api = 'subaccounts';\n\nmodule.exports = function(client) {\n  const subaccounts = {\n    /**\n     * List a summary of all subaccounts\n     *\n     * @param {RequestCb} [callback]\n     * @return {Promise}\n     */\n    list: function(callback) {\n      const options = {\n        uri: api\n      };\n      return client.get(options, callback);\n    },\n    /**\n     * Get details about a specified subaccount by its id\n     *\n     * @param {string} id - the id of the subaccount you want to look up\n     * @param {RequestCb} [callback]\n     * @returns {Promise}\n     */\n    get: function(id, callback) {\n      if (!id || typeof id !== 'string') {\n        return client.reject(new Error('id is required'), callback);\n      }\n\n      const options = {\n        uri: `${api}/${id}`\n      };\n      return client.get(options, callback);\n    },\n    /**\n     * Create a new subaccount\n     *\n     * @param subaccount - an object of [subaccount attributes]{https://developers.sparkpost.com/api/subaccounts#header-request-body-attributes}\n     * @param {RequestCb} [callback]\n     * @returns {Promise}\n     */\n    create: function(subaccount, callback) {\n      if (!subaccount || typeof subaccount !== 'object') {\n        return client.reject(new Error('subaccount object is required'), callback);\n      }\n\n      const reqOpts = {\n        uri: api,\n        json: subaccount\n      };\n      return client.post(reqOpts, callback);\n    },\n    /**\n     * Update existing subaccount by id\n     *\n     * @param {string} id - the id of the subaccount you want to update\n     * @param {Object} subaccount - an object of [subaccount attributes]{https://developers.sparkpost.com/api/subaccounts#header-request-body-attributes-1}\n     * @param {RequestCb} callback\n     * @returns {Promise}\n     */\n    update: function(id, subaccount, callback) {\n      if (!id || typeof id !== 'string') {\n        return client.reject(new Error('id is required'), callback);\n      }\n\n      if (!subaccount || typeof subaccount !== 'object') {\n        return client.reject(new Error('subaccount object is required'), callback);\n      }\n\n      const reqOpts = {\n        uri: `${api}/${id}`,\n        json: subaccount\n      };\n\n      return client.put(reqOpts, callback);\n    }\n  };\n\n  return subaccounts;\n};\n","/home/travis/build/npmtest/node-npmtest-sparkpost/node_modules/sparkpost/lib/suppressionList.js":"'use strict';\n\nconst api = 'suppression-list';\n\nmodule.exports = function(client) {\n\n  return {\n    /**\n     * Lists all entries in your suppression list,\n     * filtered by an optional set of parameters\n     *\n     * @param {Object} [parameters] - Hash of parameters to filter results\n     * @param {RequestCb} [callback]\n     * @return {Promise}\n     */\n    list: function(parameters, callback) {\n      const options = {\n        uri: api\n        , qs: parameters\n      };\n      return client.get(options, callback);\n    },\n\n    /**\n     * Gets a single entry by email address ID\n     *\n     * @param {String} email\n     * @param {RequestCb} [callback]\n     * @return {Promise}\n     */\n    get: function(email, callback) {\n      if (!email || typeof email === 'function') {\n        return client.reject(new Error('email is required'), callback);\n      }\n\n      const options = {\n        uri: `${api}/${email}`\n      };\n      return client.get(options, callback);\n    },\n\n    /**\n     * Updates existing entries, or creates entries\n     * if they don't exist for that email address ID\n     *\n     * @param {Array|Object} listEntries - List of suppression entry objects to upsert\n     * @param {RequestCb} [callback]\n     * @return {Promise}\n     */\n    upsert: function(listEntries, callback) {\n      if (!listEntries || typeof listEntries === 'function') {\n        return client.reject(new Error('list entries is required'), callback);\n      }\n\n      if (!Array.isArray(listEntries)) {\n        listEntries = [listEntries];\n      }\n\n      const options = {\n        uri: api,\n        json: { recipients: listEntries }\n      };\n\n      return client.put(options, callback);\n    },\n\n    /**\n     * Deletes a single entry, by email address ID\n     *\n     * @param {String} email\n     * @param {RequestCb} [callback]\n     * @return {Promise}\n     */\n    delete: function(email, callback) {\n      if (!email || typeof email === 'function') {\n        return client.reject(new Error('email is required'), callback);\n      }\n\n      const options = {\n        uri: `${api}/${email}`\n      };\n      return client.delete(options, callback);\n    }\n  };\n\n};\n","/home/travis/build/npmtest/node-npmtest-sparkpost/node_modules/sparkpost/lib/templates.js":"'use strict';\n\nconst api = 'templates';\n\nconst _ = require('lodash');\n\nmodule.exports = function(client) {\n  return {\n    /**\n     * List an overview of all templates.\n     *\n     * @param {RequestCb} [callback]\n     * @returns {Promise}\n     */\n    list: function(callback) {\n      const options = {\n        uri: api\n      };\n      return client.get(options, callback);\n    },\n    /**\n     * Get details about a specified template by its id.\n     *\n     * @param {string} id\n     * @param {Object} options\n     * @param {RequestCb} [callback]\n     * @returns {Promise}\n     */\n    get: function(id, options, callback) {\n      options = options || {};\n\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      if (!id) {\n        return client.reject(new Error('template id is required'), callback);\n      }\n\n      const reqOpts = {\n        uri: `${api}/${id}`\n        , qs: options\n      };\n\n      return client.get(reqOpts, callback);\n    },\n    /**\n     * Create a new template.\n     *\n     * @param {Object} template\n     * @param {RequestCb} [callback]\n     * @returns {Promise}\n     */\n    create: function(template, callback) {\n      if (!template || typeof template !== 'object') {\n        return client.reject(new Error('template object is required'), callback);\n      }\n\n      const reqOpts = {\n        uri: api\n        , json: template\n      };\n\n      return client.post(reqOpts, callback);\n    },\n    /**\n     * Update an existing template.\n     *\n     * @param {String} id\n     * @param {Object} template\n     * @param {Object} options\n     * @param {RequestCb} callback\n     * @returns {Promise}\n     */\n    update: function(id, template, options, callback) {\n      // Handle optional options argument\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      if (!id) {\n        return client.reject(new Error('template id is required'), callback);\n      }\n\n      if (!template || typeof template !== 'object') {\n        return client.reject(new Error('template object is required'), callback);\n      }\n\n      const reqOpts = {\n        uri: `${api}/${id}`\n        , json: template\n        , qs: options\n      };\n\n      return client.put(reqOpts, callback);\n    },\n    /**\n     * Delete an existing template.\n     *\n     * @param {String} id\n     * @param {RequestCb} [callback]\n     * @returns {Promise}\n     */\n    delete: function(id, callback) {\n      if (!id || typeof id !== 'string') {\n        return client.reject(new Error('template id is required'), callback);\n      }\n\n      const options = {\n        uri: `${api}/${id}`\n      };\n      return client.delete(options, callback);\n    },\n    /**\n     * Preview the most recent version of an existing template by id.\n     *\n     * @param {String} id\n     * @param {Object} options\n     * @param {RequestCb} [callback]\n     * @returns {Promise}\n     */\n    preview: function(id, options, callback) {\n      options = options || {};\n\n      // Handle optional options argument\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      if (!id) {\n        return client.reject(new Error('template id is required'), callback);\n      }\n\n      const reqOpts = {\n        uri: `${api}/${id}/preview`\n        , json: _.cloneDeep(options)\n        , qs: {}\n      };\n\n      if (reqOpts.json.draft) {\n        reqOpts.qs.draft = reqOpts.json.draft;\n        delete reqOpts.json.draft;\n      }\n\n      return client.post(reqOpts, callback);\n    }\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-sparkpost/node_modules/sparkpost/lib/transmissions.js":"'use strict';\n\nconst _ = require('lodash');\nconst api = 'transmissions';\n\n/*\n * \"Class\" declaration, Transmissions exposes three functions, one for sending a transmission,\n * another for getting a list of transmissions that have been sent, and another for getting\n * info about a specific transmission\n */\nmodule.exports = function(client) {\n  return {\n    /**\n     * List an overview of all transmissions in the account\n     *\n     * @param {Object} options\n     * @param {RequestCb} [callback]\n     * @returns {Promise}\n     */\n    list: function(options, callback) {\n      // Handle optional options argument\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      const reqOpts = {\n        uri: api,\n        qs: options\n      };\n\n      return client.get(reqOpts, callback);\n    },\n    /**\n     * Retrieve the details about a transmission by its id\n     *\n     * @param {String} id\n     * @param {RequestCb} [callback]\n     * @returns {Promise}\n     */\n    get: function(id, callback) {\n      if (typeof id !== 'string') {\n        return client.reject(new Error('id is required'), callback);\n      }\n\n      const options = {\n        uri: `${api}/${id}`\n      };\n\n      return client.get(options, callback);\n    },\n    /**\n     * Sends a message by creating a new transmission\n     *\n     * @param {Object} transmission\n     * @param {Object} options\n     * @param {RequestCb} [callback]\n     * @returns {Promise}\n     */\n    send: function(transmission, options, callback) {\n      // Handle optional options argument\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      if (!transmission || typeof transmission !== 'object') {\n        return client.reject(new Error('transmission object is required'), callback);\n      }\n\n      transmission = formatPayload(transmission);\n\n      const reqOpts = {\n        uri: api,\n        json: transmission,\n        qs: options\n      };\n\n      return client.post(reqOpts, callback);\n    }\n  };\n\n};\n\nfunction formatPayload(originalTransmission) {\n  const transmission = _.cloneDeep(originalTransmission);\n\n  // don't format the payload if we are not given an array of recipients\n  if (!_.isArray(transmission.recipients)) {\n    return transmission;\n  }\n\n  // format all the original recipients to be in the object format\n  transmission.recipients = _.map(transmission.recipients, (recipient) => {\n    recipient.address = addressToObject(recipient.address);\n\n    return recipient;\n  });\n\n  // add the CC headers\n  if (_.isArray(transmission.cc) && transmission.cc.length > 0) {\n    _.set(transmission, 'content.headers.CC', generateCCHeader(transmission));\n  }\n\n  const headerTo = generateHeaderTo(transmission.recipients);\n\n  transmission.recipients = addListToRecipients(transmission, 'cc', headerTo);\n  transmission.recipients = addListToRecipients(transmission, 'bcc', headerTo);\n\n  delete transmission.cc;\n  delete transmission.bcc;\n\n  return transmission;\n}\n\nfunction addListToRecipients(transmission, listName, headerTo) {\n  if (!_.isArray(transmission[listName])) {\n    return transmission.recipients;\n  }\n\n  return transmission.recipients.concat(_.map(transmission[listName], (recipient) => {\n    recipient.address = addressToObject(recipient.address);\n\n    recipient.address.header_to = headerTo;\n\n    // remove name from address - name is only put in the header for cc and not at all for bcc\n    if (_.has(recipient.address, 'name')) {\n      delete recipient.address.name;\n    }\n\n    return recipient;\n  }));\n}\n\nfunction generateCCHeader(transmission) {\n  return _.map(transmission.cc, (ccRecipient) => addressToString(ccRecipient.address)).join(', ');\n}\n\nfunction generateHeaderTo(recipients) {\n  // if a recipient has a header_to then it is cc'd or bcc'd and we don't want it in the header_to value\n  const originalRecipients = _.filter(recipients, (recipient) => !_.has(recipient.address, 'header_to'));\n\n  return _.map(originalRecipients, (recipient) => addressToString(recipient.address)).join(', ');\n}\n\nfunction addressToString(address) {\n  if (_.isPlainObject(address)) {\n    if (_.has(address, 'name')) {\n      address = `\"${address.name}\" <${address.email}>`;\n    } else {\n      address = address.email;\n    }\n  }\n\n  return address;\n}\n\nfunction addressToObject(address) {\n  let addressObject = address;\n\n  if (_.isString(address)) {\n    addressObject = {};\n\n    const matches = /\"?(.[^\"]*)?\"?\\s*<(.+)>/gi.exec(address);\n\n    if (matches) {\n      addressObject.name = matches[1];\n      addressObject.email = matches[2];\n    } else {\n      addressObject.email = address;\n    }\n  }\n\n  return addressObject;\n}\n","/home/travis/build/npmtest/node-npmtest-sparkpost/node_modules/sparkpost/lib/webhooks.js":"'use strict';\n\nconst api = 'webhooks';\n\nmodule.exports = function(client) {\n  return {\n\n    /**\n     * Lists all webhooks\n     *\n     * @param {Object} [options] - Hash of options\n     * @param {string} [options.timezone] - The timezone to use for the last_successful and last_failure properties.\n     * @param {RequestCb} [callback]\n     * @returns {Promise}\n     */\n    list: function(options, callback) {\n      const reqOpts = {\n        uri: api,\n        qs: {}\n      };\n\n      if (!options || typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      if (options.timezone) {\n        reqOpts.qs.timezone = options.timezone;\n      }\n\n      return client.get(reqOpts, callback);\n    },\n\n    /**\n     * Get a single webhook by ID\n     *\n     * @param {string} id - The ID of the webhook to get\n     * @param {Object} [options] - Hash of options\n     * @param {string} [options.timezone] - The timezone to use for the last_successful and last_failure properties.\n     * @param {RequestCb} [callback]\n     * @returns {Promise}\n     */\n    get: function(id, options, callback) {\n      if (!options || typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      if (typeof id !== 'string') {\n        return client.reject(new Error('id is required'), callback);\n      }\n\n      const reqOpts = {\n        uri: `${api}/${id}`,\n        qs: {}\n      };\n\n      if (options.timezone) {\n        reqOpts.qs.timezone = options.timezone;\n      }\n\n      return client.get(reqOpts, callback);\n    },\n\n    /**\n     * Creates a new webhook\n     *\n     * @param {Object} webhook - attributes used to create the new webhook\n     * @param {RequestCb} [callback]\n     * @returns {Promise}\n     */\n    create: function(webhook, callback) {\n      if (!webhook || typeof webhook === 'function') {\n        return client.reject(new Error('webhook object is required'), callback);\n      }\n\n      const options = {\n        uri: api,\n        json: webhook\n      };\n\n      return client.post(options, callback);\n    },\n\n    /**\n     * Update an existing webhook\n     *\n     * @param {string} id - The ID of the webhook to update\n     * @param {Object} webhook - Hash of the webhook attributes to update\n     * @param {RequestCb} [callback]\n     * @returns {Promise}\n     */\n    update: function(id, webhook, callback) {\n      if (!id) {\n        return client.reject(new Error('id is required'), callback);\n      }\n\n      if (!webhook || typeof webhook === 'function') {\n        return client.reject(new Error('webhook object is required'), callback);\n      }\n\n      const options = {\n        uri: `${api}/${id}`,\n        json: webhook\n      };\n\n      delete options.json.id;\n\n      return client.put(options, callback);\n    },\n\n    /**\n     * Delete an existing webhook\n     *\n     * @param {string} id - The ID of the webhook to delete\n     * @param {RequestCb} [callback]\n     * @returns {Promise}\n     */\n    delete: function(id, callback) {\n      if (!id || typeof id === 'function') {\n        return client.reject(new Error('id is required'), callback);\n      }\n\n      const options = {\n        uri: `${api}/${id}`\n      };\n\n      return client.delete(options, callback);\n    },\n\n    /**\n     * Sends an example message event batch from the Webhook API to the target URL.\n     *\n     * @param {string} id - The ID of the webhook to validate\n     * @param {Object} options - Hash of options used to validate the webhook\n     * @param {string} options.message - The message (payload) to send to the webhook consumer.\n     * @param {RequestCb} [callback]\n     * @returns {Promise}\n     */\n    validate: function(id, options, callback) {\n      if (typeof id !== 'string') {\n        return client.reject(new Error('id is required'), callback);\n      }\n\n      if (!options || typeof options === 'function' || !options.message) {\n        return client.reject(new Error('message is required'), callback);\n      }\n\n      const reqOpts = {\n        uri: `${api}/${id}/validate`,\n        json: {\n          message: options.message\n        }\n      };\n\n      return client.post(reqOpts, callback);\n    },\n\n    /**\n     * Gets recent status information about a webhook.\n     *\n     * @param {string} id - The ID of the webhook to check\n     * @param {Object} [options] - Hash of options\n     * @param {string} [options.limit] - The maximum number of results to return.\n     * @param {RequestCb} [callback]\n     * @returns {Promise}\n     */\n    getBatchStatus: function(id, options, callback) {\n      if (!options || typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      if (typeof id !== 'string') {\n        return client.reject(new Error('id is required'), callback);\n      }\n\n      const reqOpts = {\n        uri: `${api}/${id}/batch-status`,\n        qs: {}\n      };\n\n      if (options.limit) {\n        reqOpts.qs.limit = options.limit;\n      }\n\n      return client.get(reqOpts, callback);\n    },\n\n    /**\n     * Lists descriptions of the events, event types, and event fields that could be included in a Webhooks post to your target URL.\n     *\n     * @param {RequestCb} [callback]\n     * @returns {Promise}\n     */\n    getDocumentation: function(callback) {\n      const reqOpts = {\n        uri: `${api}/events/documentation`\n      };\n      return client.get(reqOpts, callback);\n    },\n\n    /**\n     * Lists examples of the event data that will be posted to a webhook consumer.\n     *\n     * @param {Object} [options] - Hash of options\n     * @param {string} [options.events] - A comma delimited list of events to get samples of.\n     * @param {RequestCb} [callback]\n     * @returns {Promise}\n     */\n    getSamples: function(options, callback) {\n      const reqOpts = {\n        uri: `${api}/events/samples`,\n        qs: {}\n      };\n\n      if (!options || typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      if (options.events) {\n        reqOpts.qs.events = options.events;\n      }\n\n      return client.get(reqOpts, callback);\n    }\n  };\n};\n"}